// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  firstName          String    @map("first_name")
  lastName           String    @map("last_name")
  address            String
  phoneNumber        String    @map("phone_number")
  email              String    @unique
  password           String
  resetPasswordToken String?   @map("reset_password_token")
  roleId             Int       @map("role_id")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")
  auth               Auth[]
  role               Role      @relation(fields: [roleId], references: [id])
  likes              Like[]
  carts              Cart[]

  @@map("users")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User[]

  @@map("roles")
}

model Auth {
  id               Int      @id @default(autoincrement())
  jti              String   @unique @db.Uuid
  userId           Int      @map("user_id")
  refreshToken     String   @map("refresh_token")
  refreshExpiresAt DateTime @map("refresh_expires_at")
  createdAt        DateTime @default(now()) @map("created_at")
  user             User     @relation(fields: [userId], references: [id])

  @@map("auth")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("categories")
}

model Brand {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  products    Product[]

  @@map("brands")
}

enum Gender {
  UNISEX @map("UNISEX")
  MALE   @map("MALE")
  FEMALE @map("FEMALE")
}

enum ClothingType {
  CLOTHING @map("CLOTHING")
  TSHIRT   @map("TSHIRT")
  FOOTWEAR @map("FOOTWEAR")
  PANTS    @map("PANTS")
  HAT      @map("HAT")
}

model Product {
  id             Int          @id @default(autoincrement())
  categoryId     Int          @map("category_id")
  brandId        Int          @map("brand_id")
  isActive       Boolean      @default(true) @map("is_active")
  inStock        Boolean      @default(true) @map("in_stock")
  name           String
  description    String
  price          Decimal
  gender         Gender       @default(UNISEX)
  clothingType   ClothingType @default(CLOTHING) @map("clothing_type")
  category       Category     @relation(fields: [categoryId], references: [id])
  brand          Brand        @relation(fields: [brandId], references: [id])
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  variants       Variant[]
  likes          Like[]
  imageSecureUrl String?      @map("image_secure_url")

  @@map("products")
}

enum Size {
  EXTRA_SMALL @map("EXTRA_SMALL")
  SMALL       @map("SMALL")
  MEDIUM      @map("MEDIUM")
  LARGE       @map("LARGE")
  EXTRA_LARGE @map("EXTRA_LARGE")
}

model Variant {
  id        Int            @id @default(autoincrement())
  productId Int            @map("product_id")
  stock     Int
  color     String
  size      Size           @default(MEDIUM)
  product   Product        @relation(fields: [productId], references: [id])
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  carts     CartProducts[]

  @@map("variants")
}

model Like {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  userId    Int      @map("user_id")
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("likes")
}

model Cart {
  id           Int            @id @default(autoincrement())
  userId       Int            @map("user_id")
  user         User           @relation(fields: [userId], references: [id])
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  cartProducts CartProducts[]
  order        Order?

  @@map("carts")
}

model CartProducts {
  id        Int      @id @default(autoincrement())
  variantId Int      @map("variant_id")
  cartId    Int      @map("cart_id")
  variant   Variant  @relation(fields: [variantId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("cart_products")
}

enum Status {
  PENDING   @map("PENDING")
  ACTIVE    @map("ACTIVE")
  COMPLETED @map("COMPLETED")
  CANCELLED @map("CANCELLED")
}

model Order {
  id                    Int           @id @default(autoincrement())
  cartId                Int           @unique @map("cart_id")
  status                Status        @default(PENDING)
  stripePaymentIntendId String        @map("stripe_payment_intend_id")
  cart                  Cart          @relation(fields: [cartId], references: [id])
  createdAt             DateTime      @default(now()) @map("created_at")
  transactions          Transaction[]

  @@map("orders")
}

model Transaction {
  id             Int      @id @default(autoincrement())
  orderId        Int      @map("order_id")
  amount         Int
  stripeChargeId String   @map("stripe_charge_id")
  receiptUrl     String   @map("receipt_url")
  currency       String
  stripeStatus   String   @map("stripe_status")
  createdAt      DateTime @default(now()) @map("created_at")
  order          Order    @relation(fields: [orderId], references: [id])

  @@map("transactions")
}

# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthEntity {
  id: ID!
  userId: Float!
  refreshExpiresAt: DateTime!
  createdAt: DateTime!
  user: UserEntity!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type RoleEntity {
  id: ID!
  name: String!
  slug: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: [UserEntity!]
}

type UserEntity {
  id: ID!
  firstName: String!
  lastName: String!
  address: String!
  phoneNumber: String!
  email: String!
  roleId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  auth: [AuthEntity!]
  role: RoleEntity!
}

type BrandEntity {
  id: ID!
  name: String!
  description: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [ProductEntity!]
}

type CategoryEntity {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [ProductEntity!]
}

type VariantEntity {
  id: ID!
  productId: Float!
  stock: Float!
  color: String!
  size: Size!
  product: ProductEntity!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum Size {
  EXTRA_SMALL
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

type ProductEntity {
  id: ID!
  categoryId: Float!
  brandId: Float!
  isActive: Boolean!
  inStock: Boolean!
  name: String!
  description: String!
  price: Float!
  gender: GenderEnum!
  clothingType: ClothingTypeEnum!
  category: CategoryEntity!
  brand: BrandEntity!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  variants: [VariantEntity!]
}

enum GenderEnum {
  UNISEX
  MALE
  FEMALE
}

enum ClothingTypeEnum {
  CLOTHING
  TSHIRT
  FOOTWEAR
  PANTS
  HAT
}

type Query {
  me: UserEntity!
  products: [ProductEntity!]!
}

type Mutation {
  UpdateUser(updateUserInput: UpdateUserInput!): UserEntity!
  createProduct(createProductInput: CreateProductInput!): ProductEntity!
  updateProduct(updateProductInput: UpdateProductInput!): ProductEntity!
  removeProduct(id: Int!): ProductEntity!
}

"""Input type to update an user info"""
input UpdateUserInput {
  """First name of the user"""
  firstName: String

  """Last name of the user"""
  lastName: String

  """Address of the user"""
  address: String

  """Phone number of the user"""
  phoneNumber: String

  """Email number of the user"""
  email: String
}

input CreateProductInput {
  """Category of the product"""
  categoryId: Int!

  """Brand of the product"""
  brandId: Int!

  """Product name"""
  name: String!

  """Product description"""
  description: String!

  """Product price"""
  price: Float!

  """Product is active or not"""
  isActive: Boolean = true

  """Shows if product is in stock"""
  inStock: Boolean = true

  """Clothing type of the product"""
  clothingType: ClothingTypeEnum = CLOTHING

  """Product gender"""
  gender: GenderEnum = UNISEX
}

input UpdateProductInput {
  """Category of the product"""
  categoryId: Int

  """Brand of the product"""
  brandId: Int

  """Product name"""
  name: String

  """Product description"""
  description: String

  """Product price"""
  price: Float

  """Product is active or not"""
  isActive: Boolean = true

  """Shows if product is in stock"""
  inStock: Boolean = true

  """Clothing type of the product"""
  clothingType: ClothingTypeEnum = CLOTHING

  """Product gender"""
  gender: GenderEnum = UNISEX
  id: Int!
}